using Distributions
using Random
using DataFrames
using DelimitedFiles
using Optim
using Parameters, Plots

cd("/Users/bubbles/Desktop/717 Wiswall/PS1")


#set initial parameters

μ_1=1.665
μ_2=1.5
σ_1=0.5
σ_2=1.5
ρ=0.5
π_1=1
π_2=1
N=10000


##########b#########

#an initial function to solve model for the choices of the individuals

function choice()
    #initialization
    σ_12=σ_1*σ_2*ρ
    μ=[μ_1,μ_2]
    sigma_matrix=[σ_1^2 σ_12; σ_12 σ_2^2]
    d=MvNormal(μ,sigma_matrix)
    Random.seed!(456)
    ϵ=rand(d,N)
    S_1=exp.(μ_1.+ϵ[1,:])
    S_2=exp.(μ_2.+ϵ[2,:])
    log_W_1=log.(π_1.*S_1)
    log_W_2=log.(π_2.*S_2)
return D=(log_W_1.-log_W_2).>0
end

D_matrix=choice()

mean(D_matrix)


##########c#########

#using the above function, one vector that results in 60% choosing D=1 is the following###

#μ_1=1.665
#μ_2=1.5
#σ_1=0.5
#σ_2=1.5
#ρ=0.5
#π_1=1
#π_2=1


##########e#########


function getmoments(μ_1,ρ) #function to compute moments
    μ=[μ_1,μ_2]
    σ_12=σ_1*σ_2*ρ
    sigma_matrix=[σ_1^2 σ_12; σ_12 σ_2^2]
    d=MvNormal(μ,sigma_matrix)
    Random.seed!(456)
    ϵ=rand(d,N)
    S_1=exp.(μ_1.+ϵ[1,:])
    S_2=exp.(μ_2.+ϵ[2,:])
    log_W_1=log.(π_1.*S_1)
    log_W_2=log.(π_2.*S_2)
    D=(log_W_1.-log_W_2).>0
    log_w_observed=D.*log_W_1 .+ (1 .- D).*log_W_2
    SimulatedData=zeros(N,2)
    SimulatedData[:,1]=D
    SimulatedData[:,2]=log_w_observed
    SimulatedData=DataFrames.DataFrame(SimulatedData,:auto)
    Simulated_1=subset(SimulatedData, :x1=> ByRow(==(1.0)))
    Simulated_2=subset(SimulatedData, :x1=> ByRow(==(0.0)))
    moments=zeros(5)
    #get moments
    moments[1]=mean(SimulatedData[:,1])
    moments[2]=mean(Simulated_1[:,2])
    moments[3]=mean(Simulated_2[:,2])
    moments[4]=std(Simulated_1[:,2])
    moments[5]=std(Simulated_2[:,2])
    return moments
end

moments_true = getmoments(1.665,0.5) #computing true data moments

function obj_func(b)
    W=[1 0 0 0 0; 0 1 0 0 0 ; 0 0 1 0 0; 0 0 0 1 0; 0 0 0 0 1]
    μ_1_guess=b[1]
    ρ_guess=b[2]
    return objective_func = (moments_true-getmoments(μ_1_guess,ρ_guess))'*W*(moments_true-getmoments(μ_1_guess,ρ_guess))
end

beta=[1,0.6] #set some initial guess

opt2 = optimize(obj_func,beta, g_tol = 0.00001, iterations = 10000) #find minimizer of objective function
moment_estimates=opt2.minimizer


##########f#########

#the code below plots the identification figures

grid_fine_1 = 1:0.01:2
grid_fine_2 = 0.4:0.005:0.8

z_grid =[obj_func(beta) for beta[1] in grid_fine_1, beta[2] in 0.506758]

Plots.plot(grid_fine_1,z_grid)

Plots.plot!([1.66569], seriestype="vline")

savefig("identification1.png")

y_grid =[obj_func(beta) for beta[1] in 1.66569, beta[2] in grid_fine_2]

Plots.plot(grid_fine_2,y_grid)

Plots.plot!([0.506758], seriestype="vline")

savefig("identification2.png")

##########g#########

#calculate the true moments and moments based on estimates

moments_true = getmoments(1.665,0.5)
moments_at_estimate=getmoments(1.66569,0.506758)


##counterfactual

#the function below calculates moments for any minimum wage W_1_Min

function getmoments_counterfactual(W_1_Min, μ_1,ρ)
    μ=[μ_1,μ_2]
    σ_12=σ_1*σ_2*ρ
    sigma_matrix=[σ_1^2 σ_12; σ_12 σ_2^2]
    d=MvNormal(μ,sigma_matrix)
    Random.seed!(456)
    ϵ=rand(d,N)
    S_1=exp.(μ_1.+ϵ[1,:])
    S_2=exp.(μ_2.+ϵ[2,:])
    W_1=max.(π_1.*S_1,W_1_Min) ##the minimum wage criteria

    log_W_1=log.(W_1)
    log_W_2=log.(π_2.*S_2)
    D=(log_W_1.-log_W_2).>0
    log_w_observed=D.*log_W_1 .+ (1 .- D).*log_W_2
    SimulatedData=zeros(N,2)
    SimulatedData[:,1]=D
    SimulatedData[:,2]=log_w_observed
    SimulatedData=DataFrames.DataFrame(SimulatedData,:auto)
    Simulated_1=subset(SimulatedData, :x1=> ByRow(==(1.0)))
    Simulated_2=subset(SimulatedData, :x1=> ByRow(==(0.0)))
    moments=zeros(5)
    #get moments
    moments[1]=mean(SimulatedData[:,1])
    moments[2]=mean(Simulated_1[:,2])
    moments[3]=mean(Simulated_2[:,2])
    moments[4]=std(Simulated_1[:,2])
    moments[5]=std(Simulated_2[:,2])
    return moments
end

res_new=getmoments_counterfactual(39.5,1.66569,0.506758)
res_baseline=getmoments(1.66569,0.506758)
